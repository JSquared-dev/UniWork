{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw11900\paperh16840\margl1440\margr1440\vieww13720\viewh9820\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\f0\b\fs24 \cf0 REPORT\

\b0 \
In order for our HLL Program to call an assembler coded function, using two parameters and a single return value, the implementation of the following steps in the attached diagram are required:\
\
\
\

\b Handling Function Parameters:\

\b0 \
Calling an assembly function in C code, is not that complicated, however we need to understand the basic mechanisms behind C function calling, which occur in Assembly.\
\
If a C function requires parameters, they are pushed onto the stack before calling the function. They must be pushed in the reverse order of the C function definition.\
\
E.g. To call; printf("String: %s.", stringToPrint), stringToPrint must be pushed onto the stack first, followed by the string literal, and finally call the printf function.\
\
The function then executes it's own code, using the parameters as it needs to and returns.\

\b \
Calling a function\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\b0 \cf0 \
Whenever calling a function, the processor overwrites the current instruction pointer (EIP) register. To prevent losing the location in memory to return to after executing the called function, EIP is pushed onto the stack. This is done automatically as part of the CALL instruction in assembly. After storing the current EIP value, the processor then changes the EIP register to the location of the function being called and continues execution.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural
\cf0 \

\b Setting up the Stack Frame:\

\b0 \
The first thing a function should do upon entry is to setup the stack frame. This involves pushing the EBP register onto the stack, and moving ESP into EBP. This preserves the location of the stack frame of out caller, and also enables easier access to the function parameters.\
\
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\ql\qnatural\pardirnatural
\ls1\ilvl0
\b \cf0 Accessing the Parameters:\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\b0 \cf0 \
After setting up the stack frame, accessing parameters are simple. As the EBP register contains our original stack position after setting up the stack frame, we know that we are 8 bytes away from our parameter data. These 8 bytes contain the EIP and EBP values pushed earlier by calling the function and setting up the stack frame.\
\
Therefore to reach the address of our parameter list, we need to add 8 to EBP. Then all we need to do is dereference this address, and we can obtain the value of the first parameter. For each subsequent parameter we simply need to add 4 to the EBP register.\
\
E.g.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural
\cf0 	mov eax, [ebp+8]    ; access the first parameter on the stack and store it's value in eax. \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural
\cf0 	mov ebx, [ebp+12]  ; access the second parameter and store it in ebx.\
	mov ecx, [ebp+16]  ; access the third parameter and store it in ecx.\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\b \cf0 Clearing the stack frame\

\b0 \
When returning from a C function, the calling function's stack frame must be restored. To restore the stack frame, we only need to to pop EBP off of the stack. This recovers the value stored earlier when the current stack frame was created. Restoring a previous stack frame removes our current stack frame.\

\b \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural
\cf0 Returning a value from a C function\

\b0 \
It is optional to return a value from a C function. If the function does return a value, it is stored the EAX register before returning from the function. This limits the return value to 4 bytes (8 bytes on 64 bit CPUs). If more information is required to be returned, there are 2 ways of doing so; returning a pointer to a data structure or modifying the contents of a parameter. \
\
Returning a pointer is bad practice, as it is not always clear if the allocated memory needs to be deallocated by the programmer using the function, or if it is deallocated by the programmer who wrote the function (or possibly library).\
\
Modifying the contents of a parameter is more common. If a parameter of a function is a pointer, the programmer can modify the contents of memory at the address pointed to by the parameter. This is preferential, as it forces the programmer calling the function to handle all memory allocation/deallocation
\b \

\b0 \
The function can then return from the function using the instruction RET. This instruction pops EIP off of the stack and returns it to the EIP register which then points to the instruction after the function call and execution can continue.\
\

\b Description of the Operation of Our Encryption Technique:\

\b0 \
Our encryption algorithm has 2 steps; obfuscation and encryption.\
\
The obfuscation step rotates the byte of data by 4 bits, before encrypting it. This achieves an encoding which runs equally fast on both encoding and decoding the value, preventing synchronisation issues during long transmissions.\
\
The encryption step uses a user specified password to modify the data before transmission. When the program is run, the user is required to input a password up to 15 characters long. Any passwords longer than this are truncated to 15 characters, passwords shorter than 15 letters are left unmodified. This password is then used to encrypt the data by using the exclusive OR operation. This is achieved by stepping through the password for each byte of data being sent, and XORing one character with the data.\
\
The benefit of an XOR encryption is that the data can be recovered using the same mask. This means that if the receiver program has had the same password input into it, then it only needs to follow the same algorithm as the encryption in order to decrypt it.\
}